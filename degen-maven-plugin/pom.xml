<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.peterlavalle.degen</groupId>
		<artifactId>libgdx-degen</artifactId>
		<version>1.3.4-SNAPSHOT</version>
	</parent>

	<artifactId>degen-maven-plugin</artifactId>
	<packaging>maven-plugin</packaging>

	<name>Maven Plugin to Degenerate External Projects</name>
	<description>
		A Maven Mojo to download and "degenerate" non-maven projects into sources and binaries

		This MOJO is supposed to scrape and "de-generate" a zip file containing jars into a project's generated-sources
		folder, skipping items provided in the `src/` folder.
		It is intended to "mavenize-with-changes" an existing project and allow the user (of the Mojo) to replace classes
		which they do not have the ability/desire to recompile without setting up a full build.
		It can also be used to import non-maven projects by not changing anything.

		The itch I wanted to scratch was mostly to port libGDX to Maven, while replacing the native methods on Matrix4,
		without rebuilding the whole project.
		In essence - it's an alternative to patching someone else's project.
	</description>

	<licenses>
		<license>
			<name>GNU AFFERO GENERAL PUBLIC LICENSE</name>
			<url>http://www.gnu.org/licenses/agpl-3.0.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>g-pechorin</id>
			<roles>
				<role>Developer</role>
			</roles>
			<url>https://github.com/g-pechorin</url>
		</developer>
	</developers>

	<build>
		<plugins>
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
				<version>${scala.plugin}</version>
				<executions>
					<execution>
						<id>scala-compile-first</id>
						<phase>process-resources</phase>
						<goals>
							<goal>compile</goal>
							<!--
							testCompile doesn't work here; need to compile some .java files before we can compile the test sources
							-->
						</goals>
					</execution>
				</executions>
				<configuration>
					<args>
						<arg>-make:transitive</arg>
						<arg>-dependencyfile</arg>
						<arg>${project.build.directory}/.scala_dependencies</arg>
					</args>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>2.5.1</version>
				<executions>
					<execution>
						<id>generated-helpmojo</id>
						<goals>
							<goal>helpmojo</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jamon</groupId>
				<artifactId>jamon-maven-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>translate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>


		<dependency>
			<groupId>org.jamon</groupId>
			<artifactId>jamon-runtime</artifactId>
			<version>2.4.0</version>
		</dependency>

		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>3.0</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-compiler-api</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-project</artifactId>
			<version>2.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-plugin-api</artifactId>
			<version>3.0.4</version>
		</dependency>
		<dependency>
			<groupId>plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<version>1.0.3</version>
		</dependency>

		<dependency>
			<groupId>org.kamranzafar</groupId>
			<artifactId>jtar</artifactId>
			<version>2.2</version>
		</dependency>
	</dependencies>
</project>
